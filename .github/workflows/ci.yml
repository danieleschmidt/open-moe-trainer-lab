name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  PYTORCH_VERSION: '2.1.0'
  CUDA_VERSION: '11.8'

jobs:
  pre-checks:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: pre-commit/action@v3.0.0

  test-matrix:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: pre-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        pytorch-version: ['2.0.0', '2.1.0']
        exclude:
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.12'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build
      
      - name: Install PyTorch ${{ matrix.pytorch-version }}
        run: |
          pip install torch==${{ matrix.pytorch-version }} torchvision torchaudio \
            --index-url https://download.pytorch.org/whl/cpu
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -e ".[dev,benchmarking]"
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short \
            --cov=moe_lab --cov-report=xml --cov-report=term-missing
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  gpu-tests:
    name: GPU Tests
    runs-on: [self-hosted, gpu]
    needs: pre-checks
    if: github.event_name != 'schedule'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install CUDA dependencies
        run: |
          pip install torch torchvision torchaudio \
            --index-url https://download.pytorch.org/whl/cu118
      
      - name: Install package
        run: |
          pip install -e ".[dev,gpu,distributed]"
      
      - name: Run GPU tests
        run: |
          pytest tests/ -m gpu -v --tb=short
        env:
          CUDA_VISIBLE_DEVICES: '0'
      
      - name: Run distributed tests
        run: |
          pytest tests/distributed/ -v --tb=short
        env:
          CUDA_VISIBLE_DEVICES: '0,1'

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: pre-checks
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -e ".[dev,benchmarking]"
      
      - name: Run performance tests
        run: |
          pytest tests/benchmarks/ -v --benchmark-json=benchmark.json
      
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: pre-checks
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install bandit[toml] safety pip-audit
      
      - name: Run Bandit security scan
        run: |
          bandit -r moe_lab/ -f json -o bandit-report.json || true
      
      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-report.json || true
      
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: pre-checks
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -e ".[dev]"
          pip install sphinx sphinx-rtd-theme nbsphinx
      
      - name: Build docs
        run: |
          cd docs && make html
      
      - name: Upload docs artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test-matrix]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-matrix, security-scan, build-docs]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test-matrix.result }}" != "success" ]]; then
            echo "Tests failed!"
            exit 1
          fi
      
      - name: Check security scan
        run: |
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "Security scan failed!"
            exit 1
          fi
      
      - name: Quality gate passed
        run: echo "All quality checks passed!"