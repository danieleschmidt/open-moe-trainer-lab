# Release Pipeline for Open MoE Trainer Lab
# Template file - Copy to release.yml and customize as needed

name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.9'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Pre-release Validation
  # =============================================================================
  
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate version format
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
          IS_PRERELEASE="false"
        fi
        
        # Validate version format (semantic versioning)
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.0.0 or v1.0.0-alpha"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "✅ Version $VERSION is valid"
        
    - name: Check if version exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git tag -l | grep -q "^$VERSION$"; then
          echo "❌ Version $VERSION already exists"
          exit 1
        fi
        echo "✅ Version $VERSION is unique"
        
    - name: Validate changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [ ! -f "CHANGELOG.md" ]; then
          echo "⚠️ CHANGELOG.md not found"
          exit 0
        fi
        
        if ! grep -q "$VERSION" CHANGELOG.md; then
          echo "⚠️ Version $VERSION not found in CHANGELOG.md"
          echo "Please update the changelog before releasing"
          exit 1
        fi
        echo "✅ Changelog updated for $VERSION"

  # =============================================================================
  # Run Full Test Suite
  # =============================================================================
  
  test-release:
    name: Test Release
    runs-on: ubuntu-latest
    needs: [validate-release]
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,all]
        
    - name: Run comprehensive tests
      run: |
        pytest tests/ -v \
          --cov=moe_lab \
          --cov-report=xml \
          --junit-xml=test-results-py${{ matrix.python-version }}.xml
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: release-test-results-py${{ matrix.python-version }}
        path: |
          test-results-py${{ matrix.python-version }}.xml
          coverage.xml

  # =============================================================================
  # Build Release Artifacts
  # =============================================================================
  
  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Update version in code
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"  # Remove 'v' prefix
        
        # Update version in pyproject.toml
        sed -i "s/^version = .*/version = \"$VERSION_NUMBER\"/" pyproject.toml
        
        # Update version in __init__.py if it exists
        if [ -f "moe_lab/__init__.py" ]; then
          sed -i "s/__version__ = .*/__version__ = \"$VERSION_NUMBER\"/" moe_lab/__init__.py
        fi
        
        echo "✅ Updated version to $VERSION_NUMBER"
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Test package installation
      run: |
        # Create fresh virtual environment
        python -m venv test_env
        source test_env/bin/activate
        
        # Install from wheel
        pip install dist/*.whl
        
        # Test import
        python -c "import moe_lab; print(f'✅ Package version: {moe_lab.__version__}')"
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # =============================================================================
  # Build Docker Images
  # =============================================================================
  
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable={{is_default_branch}}
          
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push training image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: training
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}-train
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-train
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Build and push inference image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: inference
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}-serve
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-serve
        labels: ${{ steps.meta.outputs.labels }}

  # =============================================================================
  # Security Scanning
  # =============================================================================
  
  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [build-docker]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # Fail on critical/high vulnerabilities
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Generate Release Notes
  # =============================================================================
  
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate-release]
    
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate release notes
      id: notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | head -n 2 | tail -n 1)
        
        echo "Generating release notes for $VERSION (since $PREVIOUS_TAG)"
        
        # Create release notes
        cat > release_notes.md << EOF
        # What's Changed in $VERSION
        
        ## 🚀 New Features
        $(git log $PREVIOUS_TAG..$VERSION --grep="feat:" --pretty="- %s" | sed 's/feat: //')
        
        ## 🐛 Bug Fixes
        $(git log $PREVIOUS_TAG..$VERSION --grep="fix:" --pretty="- %s" | sed 's/fix: //')
        
        ## 📚 Documentation
        $(git log $PREVIOUS_TAG..$VERSION --grep="docs:" --pretty="- %s" | sed 's/docs: //')
        
        ## 🔧 Performance & Improvements
        $(git log $PREVIOUS_TAG..$VERSION --grep="perf:\|refactor:" --pretty="- %s" | sed 's/perf: //; s/refactor: //')
        
        ## 📦 Dependencies
        $(git log $PREVIOUS_TAG..$VERSION --grep="deps:" --pretty="- %s" | sed 's/deps: //')
        
        ## 🔄 Other Changes
        $(git log $PREVIOUS_TAG..$VERSION --oneline --grep="feat:\|fix:\|docs:\|perf:\|refactor:\|deps:" --invert-grep | sed 's/^[a-f0-9]* /- /')
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION
        
        ## 📥 Installation
        
        ### PyPI
        \`\`\`bash
        pip install open-moe-trainer-lab==${VERSION#v}
        \`\`\`
        
        ### Docker
        \`\`\`bash
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
        \`\`\`
        
        ### From Source
        \`\`\`bash
        git clone https://github.com/${{ github.repository }}.git
        cd ${GITHUB_REPOSITORY#*/}
        git checkout $VERSION
        pip install -e .
        \`\`\`
        EOF
        
        # Set output (escape newlines for GitHub Actions)
        RELEASE_NOTES=$(cat release_notes.md | sed ':a;N;$!ba;s/\n/\\n/g')
        echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT
        
    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release_notes.md

  # =============================================================================
  # Create GitHub Release
  # =============================================================================
  
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, build-docker, security-scan, generate-release-notes]
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: Open MoE Trainer Lab ${{ needs.validate-release.outputs.version }}
        body: ${{ needs.generate-release-notes.outputs.release_notes }}
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        
    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/*.whl
        asset_name: open_moe_trainer_lab-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip
        
    - name: Upload source distribution to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/*.tar.gz
        asset_name: open-moe-trainer-lab-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  # =============================================================================
  # Publish to PyPI
  # =============================================================================
  
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, create-release]
    environment: pypi
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Publish to Test PyPI
      if: needs.validate-release.outputs.is_prerelease == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        
    - name: Publish to PyPI
      if: needs.validate-release.outputs.is_prerelease == 'false'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  # =============================================================================
  # Update Documentation
  # =============================================================================
  
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Build documentation
      run: |
        cd docs
        make html
        
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/build/html/
        destination_dir: ${{ needs.validate-release.outputs.version }}
        
    - name: Update latest docs symlink
      run: |
        cd docs/build/html
        ln -sf ${{ needs.validate-release.outputs.version }} latest

  # =============================================================================
  # Post-release Actions
  # =============================================================================
  
  post-release:
    name: Post-release Actions
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi, update-docs]
    if: always()
    
    steps:
    - name: Notify team on Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "🚀 New release published!",
            "attachments": [{
              "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
              "title": "Open MoE Trainer Lab ${{ needs.validate-release.outputs.version }}",
              "title_link": "https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}",
              "fields": [
                {
                  "title": "Version",
                  "value": "${{ needs.validate-release.outputs.version }}",
                  "short": true
                },
                {
                  "title": "Status",
                  "value": "${{ job.status }}",
                  "short": true
                }
              ]
            }]
          }
          
    - name: Update homebrew formula
      if: success() && needs.validate-release.outputs.is_prerelease == 'false'
      run: |
        # TODO: Update homebrew formula
        echo "🍺 Update Homebrew formula for ${{ needs.validate-release.outputs.version }}"
        
    - name: Update conda-forge recipe
      if: success() && needs.validate-release.outputs.is_prerelease == 'false'
      run: |
        # TODO: Update conda-forge recipe
        echo "🐍 Update conda-forge recipe for ${{ needs.validate-release.outputs.version }}"
        
    - name: Schedule post-release tests
      if: success()
      run: |
        # TODO: Schedule integration tests against the new release
        echo "🧪 Schedule post-release validation tests"