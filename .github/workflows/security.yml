name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC

permissions:
  actions: read
  contents: read
  security-events: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install safety pip-audit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .
      
      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true
      
      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Bandit
        run: |
          pip install bandit[toml]
      
      - name: Run Bandit security scan
        run: |
          bandit -r moe_lab/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Upload Bandit results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit.sarif
        continue-on-error: true
      
      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-security-scan
          path: bandit-report.json

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/ci
            p/python
            p/docker
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t moe-lab:scan .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'moe-lab:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install pip-licenses license-expression
          pip install -e .
      
      - name: Generate license report
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=csv --output-file=licenses.csv
      
      - name: Check for restrictive licenses
        run: |
          # Check for GPL, AGPL, and other restrictive licenses
          python -c "
          import json
          with open('licenses.json') as f:
              licenses = json.load(f)
          
          restrictive = ['GPL', 'AGPL', 'SSPL', 'Commons Clause']
          found_restrictive = []
          
          for pkg in licenses:
              license_name = pkg.get('License', '')
              for restrictive_license in restrictive:
                  if restrictive_license in license_name:
                      found_restrictive.append(f\"{pkg['Name']}: {license_name}\")
          
          if found_restrictive:
              print('Found restrictive licenses:')
              for item in found_restrictive:
                  print(f'  - {item}')
              exit(1)
          else:
              print('No restrictive licenses found')
          "
      
      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            licenses.json
            licenses.csv

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install cyclonedx-bom pip-audit
          pip install -e .
      
      - name: Generate SBOM
        run: |
          cyclonedx-py -o sbom.json -f json
          cyclonedx-py -o sbom.xml -f xml
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: |
            sbom.json
            sbom.xml

  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [secret-scanning, dependency-scan, code-security-scan, license-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate compliance report
        run: |
          echo "# Security Compliance Report" > compliance-report.md
          echo "Generated on: $(date)" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "## Scan Results" >> compliance-report.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> compliance-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> compliance-report.md
          echo "- Code Security Scan: ${{ needs.code-security-scan.result }}" >> compliance-report.md
          echo "- License Scan: ${{ needs.license-scan.result }}" >> compliance-report.md
          echo "" >> compliance-report.md
          
          # Check if any critical scans failed
          if [[ "${{ needs.secret-scanning.result }}" == "failure" || 
                "${{ needs.dependency-scan.result }}" == "failure" || 
                "${{ needs.code-security-scan.result }}" == "failure" ]]; then
            echo "❌ **COMPLIANCE FAILED**: Critical security issues found" >> compliance-report.md
            exit 1
          else
            echo "✅ **COMPLIANCE PASSED**: All security checks passed" >> compliance-report.md
          fi
      
      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.md
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  security-scorecard:
    name: OSSF Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
    
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: "Run analysis"
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true
      
      - name: "Upload to code-scanning"
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif