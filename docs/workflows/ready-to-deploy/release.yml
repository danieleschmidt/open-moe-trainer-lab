name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi
      
      - name: Check if tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.tag }} already exists!"
            exit 1
          fi

  run-tests:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -e ".[dev,all]"
      
      - name: Run comprehensive tests
        run: |
          pytest tests/ -v --tb=short \
            --cov=moe_lab --cov-report=xml \
            --cov-fail-under=80
      
      - name: Run security checks
        run: |
          bandit -r moe_lab/ -ll
          safety check
          pip-audit

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          pip install --upgrade pip setuptools wheel build twine
      
      - name: Update version in pyproject.toml
        run: |
          sed -i 's/version = ".*"/version = "${{ needs.validate-release.outputs.version }}"/' pyproject.toml
      
      - name: Build source and wheel distributions
        run: |
          python -m build
      
      - name: Verify distributions
        run: |
          twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-packages
          path: dist/

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push training image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: training
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}-train
            ghcr.io/${{ github.repository }}:latest-train
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -n "$PREV_TAG" ]]; then
            echo "## Changes since $PREV_TAG" > changelog.md
            echo "" >> changelog.md
            
            # Get commits since previous tag
            git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> changelog.md
          else
            echo "## Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "First release of Open MoE Trainer Lab" >> changelog.md
          fi
          
          # Set output for GitHub release
          {
            echo 'changelog<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_OUTPUT
      
      - name: Upload changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: changelog.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, build-docker, generate-changelog]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-packages
          path: dist/
      
      - name: Create or update tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.validate-release.outputs.tag }}" -m "Release ${{ needs.validate-release.outputs.tag }}"
          git push origin "${{ needs.validate-release.outputs.tag }}"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: Release ${{ needs.validate-release.outputs.tag }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ github.event.inputs.pre_release == 'true' }}
          files: |
            dist/*.tar.gz
            dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts]
    environment: pypi
    if: ${{ !github.event.inputs.pre_release }}
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-packages
          path: dist/
      
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
      
      - name: Test installation from Test PyPI
        run: |
          pip install --index-url https://test.pypi.org/simple/ \
            --extra-index-url https://pypi.org/simple/ \
            open-moe-trainer-lab==${{ needs.validate-release.outputs.version }}
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.publish-pypi.result == 'success'
        run: |
          echo "üéâ Release ${{ needs.validate-release.outputs.tag }} published successfully!"
      
      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Release ${{ needs.validate-release.outputs.tag }} failed!"