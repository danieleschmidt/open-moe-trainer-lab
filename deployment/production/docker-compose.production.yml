version: '3.8'

services:
  # MoE Lab API Server
  moe-api:
    build:
      context: ../../
      dockerfile: deployment/production/Dockerfile.optimized
      target: production
    container_name: moe-lab-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MODEL_CACHE_DIR=/app/models
      - DATA_DIR=/app/data
      - CHECKPOINT_DIR=/app/checkpoints
      - LOG_LEVEL=INFO
      - PROMETHEUS_URL=http://prometheus:9090
      - REDIS_URL=redis://redis:6379
    volumes:
      - moe_models:/app/models
      - moe_checkpoints:/app/checkpoints
      - moe_data:/app/data
      - moe_logs:/app/logs
    depends_on:
      - redis
      - prometheus
    networks:
      - moe-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # GPU-enabled MoE Server
  moe-gpu:
    build:
      context: ../../
      dockerfile: deployment/production/Dockerfile.optimized
      target: gpu-production
    container_name: moe-lab-gpu
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - MODEL_CACHE_DIR=/app/models
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      - LOG_LEVEL=INFO
    volumes:
      - moe_models:/app/models
      - moe_checkpoints:/app/checkpoints
      - moe_logs:/app/logs
    networks:
      - moe-network
    deploy:
      resources:
        limits:
          memory: 16G
        reservations:
          memory: 8G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - gpu

  # Redis for caching and job queuing
  redis:
    image: redis:7-alpine
    container_name: moe-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - moe-network
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: moe-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ../../monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - moe-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: moe-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ../../monitoring/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - moe-network
    depends_on:
      - prometheus

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: moe-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - moe-network
    depends_on:
      - moe-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: moe-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ../../monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - moe-network
    command: -config.file=/etc/loki/local-config.yaml

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: moe-promtail
    restart: unless-stopped
    volumes:
      - ../../monitoring/promtail-config.yml:/etc/promtail/config.yml
      - moe_logs:/var/log/moe
      - nginx_logs:/var/log/nginx
      - /var/log:/var/log:ro
    networks:
      - moe-network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/config.yml

  # PostgreSQL for metadata and job tracking
  postgres:
    image: postgres:15-alpine
    container_name: moe-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: moe_lab
      POSTGRES_USER: moe_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - moe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U moe_user -d moe_lab"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker nodes for distributed training
  moe-worker:
    build:
      context: ../../
      dockerfile: deployment/production/Dockerfile.optimized
      target: production
    restart: unless-stopped
    environment:
      - WORKER_TYPE=training
      - MASTER_ADDR=moe-api
      - MASTER_PORT=29500
      - REDIS_URL=redis://redis:6379
    volumes:
      - moe_models:/app/models
      - moe_checkpoints:/app/checkpoints
      - moe_data:/app/data
    networks:
      - moe-network
    depends_on:
      - moe-api
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 6G
          cpus: '3'
        reservations:
          memory: 3G
          cpus: '1.5'
    profiles:
      - distributed

networks:
  moe-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  moe_models:
    driver: local
  moe_checkpoints:
    driver: local
  moe_data:
    driver: local
  moe_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local
  postgres_data:
    driver: local